parameters:
- name: arch
  type: string
  values:
  - amd64
  - armhf
  - arm64
  default: amd64

- name: pool
  type: string
  values:
  - sonicbld
  - sonicbld-armhf
  - sonicbld-arm64
  - default
  default: default

- name: timeout
  type: number
  default: 60

- name: sonic_slave
  type: string

- name: buildimage_pipeline
  type: number

- name: sairedis_artifact_name
  type: string

- name: swss_common_artifact_name
  type: string

- name: artifact_name
  type: string

- name: archive_pytests
  type: boolean
  default: false

- name: archive_gcov
  type: boolean
  default: false

jobs:
- job:
  displayName: ${{ parameters.arch }}
  timeoutInMinutes: ${{ parameters.timeout }}

  pool:
    ${{ if ne(parameters.pool, 'default') }}:
      name: ${{ parameters.pool }}
    ${{ if eq(parameters.pool, 'default') }}:
      vmImage: 'ubuntu-20.04'

  container:
    image: sonicdev-microsoft.azurecr.io:443/${{ parameters.sonic_slave }}:latest

  steps:
  - checkout: self
    clean: true
  - script: |
      sourceBranch=$(Build.SourceBranchName)
      if [[ "$(Build.Reason)" == "PullRequest" ]];then
        sourceBranch=$(System.PullRequest.TargetBranch)
      fi
      echo "Download artifact branch: $sourceBranch"
      echo "##vso[task.setvariable variable=sourceBranch]$sourceBranch"
    displayName: "Get correct artifact downloading branch"
  - script: |
      sudo apt-get install -y libhiredis0.14 libhiredis-dev
      sudo apt-get install -y libzmq5 libzmq3-dev
      sudo apt-get install -qq -y \
          libhiredis-dev \
          swig3.0
      sudo apt-get install -y libdbus-1-3
      sudo apt-get install -y libteam-dev \
          libteam5 \
          libteamdctl0
    displayName: "Install dependencies"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: 9
      artifact: ${{ parameters.swss_common_artifact_name }}
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/$(sourceBranch)'
      path: '$(Build.SourcesDirectory)/${{ parameters.swss_common_artifact_name }}'
      allowFailedBuilds: true
      patterns: |
        **/libswsscommon_1.0.0_${{ parameters.arch }}.deb
        **/libswsscommon-dev_1.0.0_${{ parameters.arch }}.deb
    displayName: "Download sonic swss common deb packages"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: 12
      artifact: ${{ parameters.sairedis_artifact_name }}
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/$(sourceBranch)'
      path: '$(Build.SourcesDirectory)/${{ parameters.sairedis_artifact_name }}'
      allowFailedBuilds: true
      patterns: |
        **/libsaivs_*.deb
        **/libsaivs-dev_*.deb
        **/libsairedis_*.deb
        **/libsairedis-dev_*.deb
        **/libsaimetadata_*.deb
        **/libsaimetadata-dev_*.deb
        **/syncd-vs_*.deb
    displayName: "Download sonic sairedis deb packages"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: ${{ parameters.buildimage_pipeline }}
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/$(sourceBranch)'
      path: '$(Build.SourcesDirectory)/sonic-buildimage.vs'
      allowFailedBuilds: true
      patterns: |
        **/target/debs/**/libnl-3-200_*.deb
        **/target/debs/**/libnl-3-dev_*.deb
        **/target/debs/**/libnl-genl-3-200_*.deb
        **/target/debs/**/libnl-genl-3-dev_*.deb
        **/target/debs/**/libnl-route-3-200_*.deb
        **/target/debs/**/libnl-route-3-dev_*.deb
        **/target/debs/**/libnl-nf-3-200_*.deb
        **/target/debs/**/libnl-nf-3-dev_*.deb
    displayName: "Download sonic buildimage deb packages"
  - script: |
      set -ex
      sudo dpkg -i $(find sonic-buildimage.vs -name "*.deb")
      sudo dpkg -i $(find ${{ parameters.swss_common_artifact_name }} -name "*.deb")
      sudo dpkg -i $(find ${{ parameters.sairedis_artifact_name }} -name "*.deb")
    displayName: "Install libnl3, sonic swss common and sairedis"
  - script: |
      set -ex
      tar czf pytest.tgz tests
      mkdir $(Build.ArtifactStagingDirectory)/pytest
      cp -r pytest.tgz $(Build.ArtifactStagingDirectory)/pytest
      if [ '${{ parameters.archive_gcov }}' == True ]; then
         export ENABLE_GCOV=y
      fi
      ./autogen.sh
      mkdir $(Build.ArtifactStagingDirectory)/swss
      dpkg-buildpackage -us -uc -b -j$(nproc)
      cp ../*.deb $(Build.ArtifactStagingDirectory)/swss
    displayName: "Compile sonic swss"
  - publish: $(Build.ArtifactStagingDirectory)/swss
    artifact: ${{ parameters.artifact_name }}
    displayName: "Archive swss debian packages"
  - publish: $(Build.ArtifactStagingDirectory)/pytest
    artifact: sonic-swss-pytests
    displayName: "Archive swss pytests"
    condition: eq('${{ parameters.archive_pytests }}', true)
